version: '3.8'

services:
  # Base de datos PostgreSQL
  db:
    image: postgres:14.3-alpine3.16
    container_name: hotel_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-hotel_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-1234}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - hotel_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-hotel_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Aplicación Django
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: hotel_web
    command: /app/entrypoint.sh
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE:-myproject.settings.development}
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB:-hotel_db}
      - DB_USER=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-1234}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${WEB_PORT:-8000}:8000"
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    networks:
      - hotel_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Nginx para producción (opcional)
  nginx:
    image: nginx:alpine
    container_name: hotel_nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
    networks:
      - hotel_network
    depends_on:
      - web
    restart: unless-stopped
    profiles:
      - production

  # Redis para caché (opcional)
  redis:
    image: redis:7-alpine
    container_name: hotel_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - hotel_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    profiles:
      - production
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

# Volúmenes persistentes
volumes:
  db_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  redis_data:
    driver: local

# Red personalizada
networks:
  hotel_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
